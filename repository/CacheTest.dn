data Dataset {
	char key[]
	byte content[]
}

component provides App requires io.Output out, data.IntUtil iu, cache.Cache cache, 
	time.DateUtil dU, time.Calendar calendar {
	// WORKLOAD A -- for both LRU and MRU
	// TIME: 0.6 ms
	// MISSES: 100
	// HITS: 300
	// EVICTIONS: 0
	//const int BYTE_SIZE = 10000
	//const int DATASET_SIZE = 100

	// WORKLOAD B -- for LRU
	// TIME: 1.3 seconds
	// MISSES: 404
	// HITS: 0
	// EVICTIONS: 304 
	// WORKLOAD B -- for MRU
	// TIME: 0.6 seconds
	// MISSES: 104
	// HITS: 300
	// EVICTIONS: 4 
	const int BYTE_SIZE = 10000
	const int DATASET_SIZE = 101 

	// the cache_max_size and table_size has to be the same as in the cache interface
	const int CACHE_MAX_SIZE = 1000000 // 1MB
	const int TABLE_SIZE = 300

	int cacheSize = 0
	int miss = 0
	int eviction = 0
	int hit = 0

	char[] generateKey(int pos) {
		return new char[]("data", iu.intToString(pos+1))
	}

	byte[] generateContent() {
		byte toReturn[] = new byte[BYTE_SIZE]
		for (int i = 0; i < BYTE_SIZE; i++) {
			toReturn[i] = "a"
		}
		return toReturn
	}

	Dataset[] generateDataSet() {
		Dataset toReturn[] = new Dataset[DATASET_SIZE]
		for (int i = 0; i < DATASET_SIZE; i++) {
			toReturn[i] = new Dataset()
			toReturn[i].key = generateKey(i)
			toReturn[i].content = generateContent()
		}
		return toReturn
	}

	// facebook access policy:
	//	 get
	//	 	if it returns null, insert
	//		else, return item 
	// the eviction algo in here will only work when all items are the same size
	void access(Dataset item) {
		byte content[] = cache.get(item.key)
		if (content == null) {
			miss++
			cache.insert(item.key, item.content, 0)
			if ((cacheSize + item.content.arrayLength) > CACHE_MAX_SIZE) { eviction++ }
			else { cacheSize += item.content.arrayLength }
		} else { hit++ }
	}

	int App:main(AppParam params[]) {
		Dataset dataSet[] = generateDataSet()
		miss = 0
		hit = 0
		cacheSize = 0
		eviction = 0
		//sequential access
		int index = 0
		DateTime dt1 = calendar.getTime()
		for (int i = 0; i < (dataSet.arrayLength*4); i++) {
			index = i % DATASET_SIZE
			access(dataSet[index])
			//access(dataSet[2])
		}
		DateTime dt2 = calendar.getTime()
		DateTime result = dU.diff(dt1, dt2)
		out.println("Time: $(iu.intToString(dU.toMilliseconds(result))) ms")
		out.println("Number of hits: $(iu.intToString(hit))")
		out.println("Number of misses: $(iu.intToString(miss))")
		out.println("Number of evictions: $(iu.intToString(eviction))")
		return 0
	}
}
