// TCPNetwork
//
// This is a load balance component
//
// Author: Roberto Rodrigues Filho
// July @ 2020

const char debugMSG[] = "[@LB]"
const int BUFF_SIZE = 1000 

component provides App requires io.Output out, data.IntUtil iu, net.TCPSocket, 
	net.TCPServerSocket, time.Calendar ic, time.DateUtil dateUtil {

	int App:main(AppParam params[]) {
		TCPServerSocket host = new TCPServerSocket()
		int server_port = 2012
		if (params.arrayLength == 1) {
			server_port = iu.intFromString(params[0].string)
		}
		if (!host.bind(TCPServerSocket.ANY_ADDRESS, server_port)) {
			out.println("Error: failed to bind master socket")
			return 1
		}
		while (true) {
			TCPSocket client = new TCPSocket()
			if (client.accept(host)) {
				DateTime dt1
				DateTime dt2
				dt1 = ic.getTime()
				loadBalance(client)
				dt2 = ic.getTime()
				int result = dateUtil.toMilliseconds(dateUtil.diff(dt1, dt2))
				out.println("$(iu.intToString(result))")
			}
		}
		return 0
	}

	void loadBalance(TCPSocket client) {
		TCPSocket server = new TCPSocket()
		if (!server.connect("35.188.47.150", 2020)) {
		//if (!server.connect("localhost", 2020)) {
			char errorMsg[] = new char[]("$(debugMSG) ERROR! Fails to connect",
			" to localhost - 2020")
			out.println(errorMsg)
			return
		}
		char buf[] = null
		int len = 0
		char command[] = null
		while ((buf = client.recv(1)).arrayLength > 0) {
			command = new char[](command, buf)
			len++
			//stop condition
			if (len >= 4) {
				if ((command[len-4] == "\r") && (command[len-3] == "\n") && 
					(command[len-2] == "\r") && (command[len-1] == "\n")) {
					break
				}
			}
		}
		server.send(command)
		buf = null
		while ((buf = server.recv(BUFF_SIZE)).arrayLength > 0) { client.send(buf) }
		server.disconnect()
		client.disconnect()
	}
}
