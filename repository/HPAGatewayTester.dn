// Module that interacts with HPA
//
// Author: Roberto Rodrigues Filho
// August @ 2020

const char debugMSG[] = "[@HPA]"

/* HPA gateway info */
const char URL[] = "scc-mc2.lancs.ac.uk"
const int PORT 	 = 2006

const char END[] = "\r\n\r\n"
const char EXECUTION_TIME = "execution_time"
const char REGISTER = "register"

component provides App requires io.Output out, data.IntUtil iu, monitoring.Perception,
	net.TCPSocket, data.StringUtil strUtil, data.json.JSONParser parser, time.Timer t,
	data.DecUtil du {

	bool registerHPA() {
		int id = 0
		TCPSocket s = new TCPSocket()
		if (!s.connect(URL, PORT)) { 
			out.println(new char[]("Error while trying", 
				"to connect to server", 
				"$(URL)", 
				" - $(iu.intToString(PORT))"))
		} 
		s.send(new char[](REGISTER, "|", END))
		char buf[] = null
		char last4[] = new char[4]
		while (last4 != "\r\n\r\n") {
			char b[] = s.recv(1)
			buf = new char[](buf, b)
			last4[0] = last4[1]
			last4[1] = last4[2]
			last4[2] = last4[3]
			last4[3] = b[0]
		}
		s.disconnect()
		String helper[] = strUtil.explode(buf, "|")
		id = iu.intFromString(helper[1].string)
		return true
	}

	int App:main(AppParam params[]) {
		if (registerHPA()) { out.println("$(debugMSG) Funcionou!!!!") }
		else { out.println("$(debugMSG) Something went wrong!") }
		return 0
	}
} 
