component provides App requires io.Output out, data_collector.DataCollectorManager dcM,
	interceptor.DSInterceptor, data.IntUtil iu, time.Calendar ic, time.DateUtil dateUtil, 
	data.mysql.MySQL {

	void exec() {
		DateTime dt1
		DateTime dt2
		dt1 = ic.getTime()
		MySQL mysql = new MySQL("localhost", 3306, "root", "root", "data_collector")
		mysql.execute("SELECT * FROM data WHERE uuid = \"10\" ORDER BY id_data;")
		MySQLRow rows[] = mysql.fetchAll()
		out.print("$(iu.intToString(rows.arrayLength))")
		mysql.close()
		dt2 = ic.getTime()
		int result = dateUtil.toMilliseconds(dateUtil.diff(dt1, dt2))
		out.print(" - $(iu.intToString(result))\n")
	}

	int App:main(AppParam params[]) {
		int numThreads = 40
		while(true) {
			Thread t[] = new Thread[numThreads]
			for (int i = 0; i < numThreads; i++) {
				t[i] = asynch::exec()
			}
			for (int i = 0; i < numThreads; i++) {
				t[i].join()
			}
		}
		return 0
	}
}