/* NFRPCacheCompression.dn 
 *
 * Author: Roberto Rodrigues Filho - Sept @ 2018
 */
component provides ws.Web, Service requires io.Output out, ws.Web:nfrp web, interceptor.DSInterceptor, 
	cache.Cache cache, compression.Compression compression, io.File {

	implementation Service {
		void Service:start() {
			cache.deleteAll()
		}

		void Service:stop() {
			cache.deleteAll()
		}
	}

	implementation Web {
		Mutex cacheLock = new Mutex()

		bool isCachable(Header header[]) {
			for (int i = 0; i < header.arrayLength; i++) {
				if (header[i].key == "Cache-Control") {
					if (header[i].value == "no-cache") {
						return false
					}
				}
			}
			return true
		}

		bool Web:get(char path[], DocStream stream, HashTable params) {
			bool result = false
			if (!isCachable(stream.getRequestHeaders())) {
				// works as NFRProxy
				DSInterceptor interceptor = new DSInterceptor(null, null, false)
				interceptor.set(stream)
				result = web.get(path, interceptor, params)
				if ((result) && (interceptor.get() != null)) {
					stream.write(interceptor.get())
				}
			} else {
				mutex (cacheLock) {
					byte response[] = cache.get(path)
					if (response != null) {
						stream.write(response)
						return true
					}
					DSInterceptor interceptor = new DSInterceptor(null, null, false)
					interceptor.set(stream)
					result = web.get(path, interceptor, params)
					//cache only if result is true
					if ((result) && (interceptor.get() != null)) {
						byte buf[] = compression.compress(interceptor.get())
						stream.write(buf)
						cache.insert(path, buf)
					}
				}
			}
			return result
		}

		bool Web:put(char path[], char contentType[], byte content[], DocStream stream, HashTable params) {
			return false
		}

		bool Web:delete(char path[], char contentType[], byte content[], DocStream stream, HashTable params) {
			return false
		}

		bool Web:post(char path[], char contentType[], byte content[], DocStream stream, HashTable params) {
			mutex (cacheLock) { cache.deleteAll() }
			return web.post(path, contentType, content, stream, params)
		}

		String[] Web:getURLPatterns() {
			return web.getURLPatterns()
		}
	}
}
