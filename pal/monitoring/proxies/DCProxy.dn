const char debugMSG[] = "[@DCProxy]"

component provides hh.HTTPHandler, monitoring.BeingMonitored requires monitoring.Container, 
	monitoring.ResponseTime, hh.HTTPHandler hh, io.Output out, interceptor.TCPInterceptor {

	static Container monitor

	implementation BeingMonitored {
		Event[] BeingMonitored:getEvents() {
			if (monitor == null) { monitor = new Container() }
			return monitor.getEvents()
		}

		Metric[] BeingMonitored:getMetrics() {
			if (monitor == null) { monitor = new Container() }
			return monitor.getMetrics()
		}
	
		void BeingMonitored:turnMonitorOn() {
			if (monitor == null) { monitor = new Container() }
			monitor.turnMonitorOn()
		}

		void BeingMonitored:turnMonitorOff() {
			if (monitor == null) { monitor = new Container() }
			monitor.turnMonitorOff()
		}
	}

	implementation HTTPHandler {
		void HTTPHandler:process(Command cmd, TCPSocket s) {
			if (monitor == null) {
				monitor = new Container()
				monitor.turnMonitorOn()
			}
			TCPInterceptor tcp = new TCPInterceptor(s)
			ResponseTime metric = new ResponseTime()
			metric.start()
			hh.process(cmd, tcp)
			metric.finish()
			int result = metric.result()
			monitor.addMetric("response_time", result, false)
			monitor.addMetric("response_size", tcp.getResponseSize(), false)
			monitor.addEvent(cmd.resource, 1)
		}
	}
}
