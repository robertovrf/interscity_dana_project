// InteractiveEmergentSys.dn
// A component that provides interactive access to EmergentSys component
//
// Author: Roberto Rodrigues Filho
// Jun @ 2020

const char debugMSG[] = "[@InteractiveEmergentSys]"

/* command line */
const char HELP[] 			 		= "help"
const char GET_CONFIG[]		 		= "get_config"
const char GET_ALL_CONFIGS[] 		= "get_all_configs"
const char SET_CONFIG[]   	 		= "set_config"
const char ADD_COMP[] 		 		= "add_comp"
const char REMOVE_COMP[] 	 		= "remove_comp"
const char ADD_PROXY[]		 		= "add_proxy"
const char REMOVE_PROXY[]	 		= "remove_proxy"
const char GET_PROXIES[]	 		= "get_proxies"
const char GET_PERCEPTION_DATA[] 	= "get_perception_data"
const char RUN_TEST[]				= "run_test"
const char EXIT[] 			 		= "exit"

/* EmergentSys ip and port */
const char IP[] = "localhost"
const int PORT = 2011


component provides App requires io.Output out, data.IntUtil iu, rest.RESys, io.Input in,
	data.StringUtil strUtil, io.TextFile, os.SystemInfo info, time.Timer t, data.DecUtil du,
	data.json.JSONParser parser {

	RESys sys = null
	String configsStr[] = null

	void help() {
		out.println("$(debugMSG) Command list:")
		out.println(" $(debugMSG) $(HELP) - to list all commands")
		out.println(" $(debugMSG) $(GET_CONFIG) show current config")
		out.println(" $(debugMSG) $(GET_ALL_CONFIGS) list all configs")
		out.println(" $(debugMSG) $(SET_CONFIG) a - set config to 'a'")
		out.println(" $(debugMSG) $(ADD_COMP) a - add a component")
		out.println(" $(debugMSG) $(REMOVE_COMP) a - remove a component")
		out.println(" $(debugMSG) $(ADD_PROXY) exp - add proxy")
		out.println(" $(debugMSG) $(REMOVE_PROXY) proxy - remove proxy")
		out.println(" $(debugMSG) $(GET_PROXIES) - get a lits of available proxy")
		out.println(" $(debugMSG) $(GET_PERCEPTION_DATA) - get perception data of current architecture")
		out.println(" $(debugMSG) $(RUN_TEST) - runs test")
		out.println(" $(debugMSG) $(EXIT) - to finish execution")
	}

	void commandInterpret(char cmd[]) {
		int collect_number = 1
		String cmdList[] = strUtil.explode(cmd, " ")
		int counter = 0
		if (cmdList.arrayLength == 1) {
			if (cmd == HELP) { help() }
			else if (cmd == GET_CONFIG) {
				out.println("$(debugMSG) Current config: $(sys.getConfig())")
			} else if (cmd == GET_ALL_CONFIGS) {
				configsStr = sys.getAllConfigs()
				out.println("$(debugMSG) $(iu.intToString(configsStr.arrayLength)) configs:")
				for (int i = 0; i < configsStr.arrayLength; i++) {
					out.println("$(debugMSG) $(iu.intToString(i)): $(configsStr[i].string)")
				}
			} else if (cmdList[0].string == GET_PROXIES) {
				String proxies[] = sys.getProxies()
				out.println("$(debugMSG) $(iu.intToString(proxies.arrayLength)) proxies:")
				for (int pointer = 0; pointer < proxies.arrayLength; pointer++) {
					out.println("$(debugMSG) $(proxies[pointer].string)")
				}
			} else if (cmdList[0].string == GET_PERCEPTION_DATA) {
				handlePerception(sys.getPerceptionData(), null)
			} else if (cmdList[0].string == RUN_TEST) {
				int observationWindow = 0
				int numberOfCycles = 0
				char resultFileName[] = null
				char allConfigsOp[] = null
				out.println("$(debugMSG) Test setup!\n$(debugMSG) Please provide the number of test cycles:")
				out.print(" test> ")
				numberOfCycles = iu.intFromString(in.readln())
				out.println("$(debugMSG) Observation window size (ms):")
				out.print(" test> ")
				observationWindow = iu.intFromString(in.readln())
				out.println("$(debugMSG) Name of output file:")
				out.print(" test> ")
				resultFileName = in.readln()
				out.println("$(debugMSG) All configs? [y/n]")
				out.print(" test> ")
				allConfigsOp = in.readln()
				if (allConfigsOp == "y") { configsStr = sys.getAllConfigs() }
				else { configsStr = new String[](new String(sys.getConfig()))}
				out.print("$(debugMSG) All setup. Press [ENTER] to start test")
				in.readln()
				out.println("$(debugMSG) Starting test...")
				TextFile outF = new TextFile(resultFileName, File.WRITE)
				for (int confCount = 0; confCount < configsStr.arrayLength; confCount++) {
					sys.setConfig(configsStr[confCount].string)
					out.println("$(debugMSG) Config: $(configsStr[confCount].string)")
					outF.writeLine(new char[]("config, ", configsStr[confCount].string))
					sys.getPerceptionData()
					for (int i = 0; i < numberOfCycles; i++) {
						t.sleep(observationWindow)
						handlePerception(sys.getPerceptionData(), outF)
					}
					if (configsStr.arrayLength > 1) { outF.writeLine("\n\n") }
				}
				outF.close()
				out.println("$(debugMSG) Test finished.")
			} else { out.println("$(debugMSG) Invalid command.") }
		} else if (cmdList.arrayLength >= 2) {
			if (cmdList[0].string == SET_CONFIG) {
				int indexConfig = iu.intFromString(cmdList[1].string)
				sys.setConfig(configsStr[indexConfig].string)
			} else if (cmdList[0].string == ADD_COMP) {
				sys.addComp(new String[](new String(strUtil.subString(cmd, (ADD_COMP.arrayLength+1),(cmd.arrayLength-ADD_COMP.arrayLength-1)))))
			} else if (cmdList[0].string == REMOVE_COMP) {
				sys.removeComp(new String[](new String(strUtil.subString(cmd, (REMOVE_COMP.arrayLength+1),(cmd.arrayLength-REMOVE_COMP.arrayLength-1)))))
			} else if (cmdList[0].string == REMOVE_PROXY) {
				sys.removeProxy(new String[](new String(strUtil.subString(cmd, (REMOVE_PROXY.arrayLength+1),(cmd.arrayLength-REMOVE_PROXY.arrayLength-1)))))
			} else if (cmdList[0].string == ADD_PROXY) {
				sys.addProxy(strUtil.subString(cmd, (ADD_PROXY.arrayLength+1),(cmd.arrayLength-ADD_PROXY.arrayLength-1)))
			} else { out.println("$(debugMSG) Invalid command.") }
		} else { out.println("$(debugMSG) Invalid command.") }
	}

	void handlePerception(char perceptionData[], TextFile file) {
		JSONElement document = parser.parseDocument(perceptionData)
		JSONElement metricsJSON = parser.getValue(document, "metrics")
		if (metricsJSON != null) {
			for (int pointer = 0; pointer < metricsJSON.children.arrayLength; pointer++) {
				JSONElement childrenMetrics = metricsJSON.children[pointer]
				char name[] = parser.getValue(childrenMetrics, "name").value
				dec value = du.decFromString(parser.getValue(childrenMetrics, "value").value)
				int count = iu.intFromString(parser.getValue(childrenMetrics, "count").value)
				dec metricValue = value/count
				 out.println("$(du.decToString(metricValue)) ms")
				if (file != null) { file.writeLine("$(name), $(du.decToString(metricValue))") }
			}
		}
	}

	int App:main(AppParam param[]) {
		sys = new RESys(IP, PORT)
		char currentConfig[] = sys.getConfig()
		if (currentConfig == null) {
			//TODO: add the -p 2020 as part of the request -- for now this is hard coded over at EmergentSys.dn
			//char wsCore[] = new char[](info.getVariable("DANA_HOME"), "/components/ws/core.o")
			char tcpNetwork[] = new char[]("../repository/TCPNetwork.o")
			out.println("$(debugMSG) Starting up the system...")
			sys.setMain(tcpNetwork)
			out.println("$(debugMSG) System running.")
			out.println("$(debugMSG) Adding proxy...")
			sys.addProxy("|../pal/monitoring/proxies/DCProxy.o|*(*:hh.HTTPHandler[0]:*)|")
			out.println("$(debugMSG) Proxy added!")
		}
		char cmd[] = "start"
		while (cmd != "exit") {
			if (cmd != "start") { commandInterpret(cmd)	}
			out.print("$(debugMSG) sys> ")
			cmd = in.readln()
		}
		return 0
	}
}