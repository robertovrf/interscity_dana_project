uses data_collector.DataCollectorManager

component provides App requires io.Output out, encoding.Encoder:uri encoder, 
	data.IntUtil iu, data.json.JSONEncoder jencoder, util.RandomInt ranInt,
	time.Calendar calendar, time.DateUtil dateUtil {

	int App:main(AppParam params[]) {
		char dropDBQuery[] = new char[]("DROP DATABASE IF EXISTS data_collector;")
		char createDBQuery[] = new char[]("CREATE DATABASE data_collector;")
		char useDBQuery[] = new char[]("USE data_collector;")
		char createDataTableQuery[] = new char[]("CREATE TABLE `data` (",
		  "`id_data` int(11) NOT NULL AUTO_INCREMENT,",
		  "`value` varchar(512) DEFAULT NULL,",
       "`uuid` varchar(512) DEFAULT NULL,",
		  "PRIMARY KEY (`id_data`)",
		") ENGINE=InnoDB DEFAULT CHARSET=latin1;")
		out.println(dropDBQuery)
		out.println(createDBQuery)
		out.println(useDBQuery)
		out.println(createDataTableQuery)
		DateTime dt = calendar.getTime()
		ranInt.setSeed(dateUtil.toMilliseconds(dt))
		char egData[] = null
		int count = 1
		for (int i = 0; i < 50; i++) {
			for (int j = 0; j < 100; j++) {
				PublicBusData bus = new PublicBusData()
				bus.location = new Location()
				bus.location.lat = new char[]("-", iu.intToString(ranInt.get(101)) , ".00032")
				bus.location.lon = new char[]("-", iu.intToString(ranInt.get(101)), ".559615")
				bus.speed = ranInt.get(101)
				bus.uuid = iu.intToString(i+1)
				bus.busline = new char[](iu.intToString(ranInt.get(1000)), "c-", 
					iu.intToString(ranInt.get(101)), "-", iu.intToString(ranInt.get(11)))
				bus.timestamp = new char[]("2017-", iu.intToString(ranInt.get(12)+1), "-",
				 iu.intToString(ranInt.get(31)+1), "T", iu.intToString(ranInt.get(24)), ":", 
				 iu.intToString(ranInt.get(60)), ":", iu.intToString(ranInt.get(60)), ".", 
				 iu.intToString(ranInt.get(1000)), "Z")
				PublicBusData myData[] = new PublicBusData[](bus)
				egData = jencoder.jsonFromArray(myData, null)
				out.println(new char[]("INSERT INTO data (value, uuid) VALUES (\"", 
					encoder.encode(egData) 
					,"\" ,\"", iu.intToString(i+1),"\");"))
				count++
			}
		}
		for (int i = 50; i < 101; i++) {
			for (int j = 0; j < 800; j++) {
				PublicBusData bus = new PublicBusData()
				bus.location = new Location()
				bus.location.lat = new char[]("-", iu.intToString(ranInt.get(101)) , ".00032")
				bus.location.lon = new char[]("-", iu.intToString(ranInt.get(101)), ".559615")
				bus.speed = ranInt.get(101)
				bus.uuid = iu.intToString(i+1)
				bus.busline = new char[](iu.intToString(ranInt.get(1000)), "c-", 
					iu.intToString(ranInt.get(101)), "-", iu.intToString(ranInt.get(11)))
				bus.timestamp = new char[]("2017-", iu.intToString(ranInt.get(12)+1), "-",
				 iu.intToString(ranInt.get(31)+1), "T", iu.intToString(ranInt.get(24)), ":", 
				 iu.intToString(ranInt.get(60)), ":", iu.intToString(ranInt.get(60)), ".", 
				 iu.intToString(ranInt.get(1000)), "Z")
				PublicBusData myData[] = new PublicBusData[](bus)
				egData = jencoder.jsonFromArray(myData, null)
				out.println(new char[]("INSERT INTO data (value, uuid) VALUES (\"", 
					encoder.encode(egData) 
					,"\" ,\"", iu.intToString(i+1),"\");"))
				count++
			}
		}
		return 0
	}
}
