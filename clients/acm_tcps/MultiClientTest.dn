const char debugMSG[] = "[@Server]"
const char STOP[] = "stop"
const char START[] = "start"

//TODO: refactor -- a lot of code repeating itself.
component provides App requires io.Output out, data.IntUtil intUtil, net.TCPSocket, 
	net.TCPServerSocket, data.StringUtil strUtil, io.TextFile, time.DateUtil dateUtil,
	time.Calendar ic, net.http.HTTPRequest request {

	bool testRunning = true

	void execute(int threadID, char size[], char entropy[], char cache[], char service[]) {
		Header header[] = null
		char url[] = null
		int id = 0
		int max = 0
		int min = 0
		if (cache == "no") {
			header = new Header[](new Header("Cache-Control", "no-cache"))
		} else {
			header = new Header[](new Header("Cache-Control", 
				new char[]("max-age=", cache)))
		}
		if (entropy == "low") {
			if (size == "one") { url = new char[](service, "/collector/resources/1/data/last") }
			if (size == "small") { url = new char[](service, "/collector/resources/10/data") }
			if (size == "big") { url = new char[](service, "/collector/resources/55/data") }
		} else if (entropy == "high") {
			if (size == "one") {
				id = 1
				max = 50
				min = 1
			} else if (size == "small") { 
				max = 50
				min = 1
			} else (size == "big") {
				max = 100
				min = 51
			}
		}
		out.println("$(debugMSG) Test starting...")
		while(testRunning) {
			if (entropy == "high") {
				if (size == "one") {
					url = new char[](url, "/collector/resources/", intUtil.intToString(id), "/data/last")
					id++
					if (id == (max+1)) { id = min }
				} else if (size == "small") {
					url = new char[](url, "/collector/resources/", intUtil.intToString(id),"/data")
					id++
					if (id == (max+1)) { id = min }	
				} else if (size == "big") {					
					url = new char[](url, "/collector/resources/", intUtil.intToString(id),"/data")
					id++
					if (id == (max+1)) { id = min }
				}
			}
			DateTime dt1 = null
			DateTime dt2 = null
			int result = 0
			dt1 = ic.getTime()
			HTTPResponse response = request.get(url, header)
			dt2 = ic.getTime()
			if ((dt1 != null) && (dt2 != null)) {
				result = dateUtil.toMilliseconds(dateUtil.diff(dt1, dt2))
			}
		}
	}


	int App:main(AppParam params[]) {
		int numRequest = 10
		Thread threads[] = new Thread[numRequest] 
		for (int i = 0; i < numRequest; i++) { 
			threads[i] = asynch::execute(i+1, "small", "low", "5", "localhost:2020")
		}
		for (int i = 0; i < numRequest; i++) {
			threads[i].join()
		}
		return 0
	}
}
