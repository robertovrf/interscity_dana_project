// This implements high entropy high volume of data -- COMPRESSION should win
component provides App requires io.Output out, net.http.HTTPRequest request,
	data.IntUtil iu, time.Calendar ic, time.DateUtil dateUtil {
	int App:main(AppParam params[]) {
		Header header[] = null
		if (params[1] != null) {
			if (params[1].string == "-1") {
				header = new Header[](new Header("Cache-Control", "no-cache"))
			} else {
				header = new Header[](new Header("Cache-Control", 
					new char[]("max-age=", params[1].string)))
			}
		}

		while(true) {
			char url[] = new char[]("scc-mc1.lancs.ac.uk:2020/collector/resources/", params[0].string,"/data")
			DateTime dt1 = null
			DateTime dt2 = null
			int result = 0
			dt1 = ic.getTime()
			HTTPResponse response = request.get(url, header)
			dt2 = ic.getTime()
			if ((dt1 != null) && (dt2 != null)) {
				result = dateUtil.toMilliseconds(dateUtil.diff(dt1, dt2))
			}
			out.println("$(iu.intToString(result))")
		}
		return 0
	}
}